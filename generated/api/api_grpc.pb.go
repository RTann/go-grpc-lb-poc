// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PocService_SendRequest_FullMethodName = "/api.PocService/SendRequest"
)

// PocServiceClient is the client API for PocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PocServiceClient interface {
	SendRequest(ctx context.Context, in *PocRequest, opts ...grpc.CallOption) (*PocResponse, error)
}

type pocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPocServiceClient(cc grpc.ClientConnInterface) PocServiceClient {
	return &pocServiceClient{cc}
}

func (c *pocServiceClient) SendRequest(ctx context.Context, in *PocRequest, opts ...grpc.CallOption) (*PocResponse, error) {
	out := new(PocResponse)
	err := c.cc.Invoke(ctx, PocService_SendRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PocServiceServer is the server API for PocService service.
// All implementations must embed UnimplementedPocServiceServer
// for forward compatibility
type PocServiceServer interface {
	SendRequest(context.Context, *PocRequest) (*PocResponse, error)
	mustEmbedUnimplementedPocServiceServer()
}

// UnimplementedPocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPocServiceServer struct {
}

func (UnimplementedPocServiceServer) SendRequest(context.Context, *PocRequest) (*PocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedPocServiceServer) mustEmbedUnimplementedPocServiceServer() {}

// UnsafePocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PocServiceServer will
// result in compilation errors.
type UnsafePocServiceServer interface {
	mustEmbedUnimplementedPocServiceServer()
}

func RegisterPocServiceServer(s grpc.ServiceRegistrar, srv PocServiceServer) {
	s.RegisterService(&PocService_ServiceDesc, srv)
}

func _PocService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PocService_SendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServiceServer).SendRequest(ctx, req.(*PocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PocService_ServiceDesc is the grpc.ServiceDesc for PocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PocService",
	HandlerType: (*PocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _PocService_SendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
